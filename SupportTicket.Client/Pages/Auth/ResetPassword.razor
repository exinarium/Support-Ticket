@page "/reset-password/{Token}"
@using System.Text.RegularExpressions
@using SupportTicket.Client.Services
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<div class="sticky-top header-row d-flex align-items-center" style="height: 60px; padding-left: 20px;">
    <span style="color: white">Support Ticket</span>
</div>

<div class="d-flex justify-content-center align-items-center" style="height: calc(100vh - 60px);">
    <div class="w-50">
        <h3 class="d-flex justify-content-center m-3"><b>Reset Password</b></h3>

        <div
            class="alert alert-success d-flex align-items-center justify-content-center @(showMessage ? "d-flex" : "d-none")"
            role="alert">
            <div>
                @message
            </div>
        </div>

        <div
            class="alert alert-danger d-flex align-items-center justify-content-center @(showError ? "d-flex" : "d-none")"
            role="alert">
            <div>
                @errorMessage
            </div>
        </div>

        <div class="input-group mb-3">
            <span class="input-group-text bg-primary" id="password-label">
                <span class="material-symbols-outlined text-white">lock</span>
            </span>
            <input
                aria-label="New Password"
                aria-describedby="password-label"
                class="form-control"
                type="password"
                id="password"
                placeholder="New Password"
                @bind="password"
                @bind:event="oninput"/>
        </div>

        <div class="input-group mb-3">
            <span class="input-group-text bg-primary" id="confirm-password-label">
                <span class="material-symbols-outlined text-white">lock</span>
            </span>
            <input
                aria-label="Confirm Password"
                aria-describedby="confirm-password-label"
                class="form-control"
                type="password"
                id="confirm-password"
                placeholder="Confirm Password"
                @bind="confirmPassword"
                @bind:event="oninput"/>
        </div>

        <button class="btn btn-primary w-100" @onclick="OnResetPassword">Reset Password</button>
    </div>
</div>

@code {
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string message = string.Empty;
    private bool showMessage = false;
    private string errorMessage = string.Empty;
    private bool showError = false;

    [Parameter]
    public string Token { get; set; }

    private async Task OnResetPassword()
    {
        if (password != confirmPassword)
        {
            showError = true;
            errorMessage = "Passwords do not match";
            return;
        }

        var regexMatch = Regex.Match(password, "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?\\s])[A-Za-z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?\\s]{8,}$");

        if (regexMatch.Success == false)
        {
            showError = true;
            errorMessage = "Passwords should contain at least 1 uppercase letter, one lowercase letter, one number, one special character and be at least 8 characters long";
            return;
        }

        if (string.IsNullOrWhiteSpace(Token))
        {
            showError = true;
            errorMessage = "Supplied reset token is not valid";
            return;
        }

        var result = await AuthenticationService.ResetPassword(Token, password);

        if (result.Success)
        {
            showMessage = true;
            showError = false;
            message = result.Message;

            Task.Run(async () =>
            {
                await Task.Delay(TimeSpan.FromMilliseconds(1500));
                NavigationManager.NavigateTo("");
            });
        }
        else
        {
            showMessage = false;
            showError = true;
            errorMessage = result.Message;
        }

    }
}